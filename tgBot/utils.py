import telebot as tb
import db
import config as cfg
import requests as rq
from datetime import datetime as dt

bot = tb.TeleBot(cfg.token)


# –ö–ª–∞—Å—Å –¥–ª—è –∏–∑–º–µ–Ω–Ω–∏–π —Å—Ç—Ä—É–∫—Ç—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π (–£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
class Editor:

    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞
    @staticmethod
    def del_buttons_text(msg):
        try:
            bot.edit_message_reply_markup(chat_id=msg.chat.id, message_id=msg.message_id - 1,
                                          reply_markup=None)
        except Exception:
            pass

    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
    @staticmethod
    def del_buttons(call):
        bot.edit_message_reply_markup(chat_id=call.chat.id, message_id=call.message_id,
                                      reply_markup=None)

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    @staticmethod
    def edit_text(call):
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=call.message.text + " " + call.data)


# –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
class CreateButtons:

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    @staticmethod
    def start_page():
        buttons = tb.types.InlineKeyboardMarkup()
        item_yes = tb.types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å', callback_data='yes')
        buttons.add(item_yes)
        return buttons

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤—ã–±–æ—Ä–æ–º –≤–∞–ª—é—Ç—ã
    @staticmethod
    def choice_value(currencies_list, call=None):
        if call:
            currencies_list.remove(call.data)
        buttons = tb.types.InlineKeyboardMarkup()
        button_list = [tb.types.InlineKeyboardButton(text=x, callback_data=x) for x in currencies_list]
        buttons.add(*button_list)
        return buttons


# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
class Calculation:

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    @staticmethod
    def check_result(count):
        try:
            if float(count.text) < 0:
                raise ValueError
        except ValueError as err:
            Logging.write_log(count, '–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {0}'.format(str(count.text)), err)
            return '–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'
        except Exception as err:
            Logging.write_log(count, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', err)
            return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        else:
            return Calculation.check_answer(count)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    @staticmethod
    def check_answer(count):
        end_value_sheet = []
        for v in db.get_info(table='val_for_convert', col='currency'):
            end_value_sheet.append(*v)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ API
        try:
            url = 'https://min-api.cryptocompare.com/data/price?fsym={0}&tsyms={1}'
            request = rq.get(url.format(end_value_sheet[0], end_value_sheet[1]))

            # –ó–∞–ø–∏—Å—å –æ—Ç–≤–µ—Ç–∞ –æ—Ç cryptocompare –≤ request_json
            request_json = request.json()
        except Exception as err:
            Logging.write_log(count, '–û—à–∏–±–∫–∞ API', err)
            return '–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        else:

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –æ—à–∏–±–∫–æ–π
            if 'Response' in request_json.keys() and request_json['Response'] in 'Error':
                Logging.write_log(count, '–û—à–∏–±–∫–∞ –≤–∞–ª—é—Ç: {0} {1}'.format(end_value_sheet[0],
                                                                        end_value_sheet[1]), request_json['Message'])
                return '–û—à–∏–±–∫–∞ –≤–∞–ª—é—Ç'
            else:
                return Calculation.Result(count, end_value_sheet[0], end_value_sheet[1], request_json)

        # –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Ä–∞—Å—á–µ—Ç –∫—É—Ä—Å–∞
    @staticmethod
    def Result(count, end_v_0, end_v_1, rq_j):
        result = "{0} {1} = {2} {3}".format(count.text, end_v_0, rq_j[end_v_1] * float(count.text), end_v_1)
        return result


# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–∞–ª—é—Ç
class Values:

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ –∫–æ–¥ –≤–∞–ª—é—Ç—ã = –∑–∞–≥–ª–∞–≤–Ω–∞—è –ª–∞—Ç–∏–Ω–∏—Ü–∞ –∏–ª–∏ –∑–∞–≥–ª–∞–≤–Ω–∞—è –ª–∞—Ç–∏–Ω–∏—Ü–∞ + —Ü–∏—Ñ—Ä—ã
    @staticmethod
    def check_value(msg):
        alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
        nums = '1234567890'
        text_abc = ''
        text_num = ''
        try:
            new_cur_rub, new_cur_eng = msg.text.split(' ')
            for i in new_cur_eng:
                if i in alphabet:
                    text_abc += i
                elif i in nums:
                    text_num += i
                else:
                    raise ValueError
            if not text_abc or new_cur_eng[0] not in alphabet:
                raise ValueError
            else:
                Values.add_value(msg, new_cur_rub, new_cur_eng)
        except ValueError as err:
            bot.send_message(msg.chat.id, '–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
            Logging.write_log(msg, '/add_value –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {0}'.format(msg.text), err)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü—É
    @staticmethod
    def add_value(msg, new_cur_rub, new_cur_eng):
        check_list = []
        for i in db.get_info(col='value', table='currencies'):
            check_list.append(*i)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–æ–±–∞–≤–ª—è–µ–º–æ–π –≤–∞–ª—é—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ
        if new_cur_eng not in check_list:
            db.insert_table(table='currencies', col='rus_value, value', value=[new_cur_rub, new_cur_eng])
            bot.send_message(msg.chat.id, '–ù–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ üëç')
        else:
            bot.send_message(msg.chat.id, '–í–∞–ª—é—Ç–∞ {0} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞'.format(new_cur_eng))
            Logging.write_log(msg, '–í–∞–ª—é—Ç–∞ {0} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞'.format(new_cur_eng),
                              '–í–∞–ª—é—Ç–∞ {0} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞'.format(new_cur_eng))

    # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç
    @staticmethod
    def show_values(msg):
        text = '–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã: \n'
        for v, rv in db.get_info(table='currencies', col='value, rus_value'):
            text = '\n'.join((text, '{0} - {1}'.format(rv, v)))
        bot.reply_to(msg, text)


# –ö–ª–∞—Å—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
class Logging:

    # –ó–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ –≤ –ë–î
    @staticmethod
    def write_log(count, text, err):
        format_time = dt.now()
        db.insert_table(table='logs',
                        col='time,error_handled,error,user',
                        value=[str(format_time.strftime('%d/%m/%Y, %H:%M')),
                               text, str(err), count.from_user.username])

    # –ó–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ –∏–∑ –ë–î –≤ text
    @staticmethod
    def get_logs():
        text = ''
        for i in db.get_info(table='logs', col='time,user,error_handled'):
            for v in i:
                text = ''.join((text, str(v) + ' | '))
            text += '\n\n'
        return text if text else '–õ–æ–≥–æ–≤ –Ω–µ—Ç'
